<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.tapanj.mapsdemo">

    <!--
         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use
         Google Maps Android API v2, but you must specify either coarse or fine
         location permissions for the 'MyLocation' functionality. 
    -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />

    <application
            android:name=".dagger.MainApplication"
            android:allowBackup="true"
            android:icon="@mipmap/ic_launcher"
            android:label="@string/app_name"
            android:roundIcon="@mipmap/ic_launcher_round"
            android:supportsRtl="true"
            android:theme="@style/AppTheme"
            android:networkSecurityConfig="@xml/network_security_config">

        <!--
             The API key for Google Maps-based APIs is defined as a string resource.
             (See the file "res/values/google_maps_api.xml").
             Note that the API key is linked to the encryption key used to sign the APK.
             You need a different API key for each encryption key, including the release key that is used to
             sign the APK for publishing.
             You can define the keys for the debug and release targets in src/debug/ and src/release/. 
        -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
        <activity
            android:name=".activities.group.GroupListActivity"
            android:label="@string/title_activity_group_list"
            android:theme="@style/AppTheme.NoActionBar">
        </activity>
        <activity
                android:name=".activities.user.UserLoginRegisterActivity"
                android:label="@string/title_activity_userLogin">
        </activity>
        <activity
            android:name=".activities.map.MapsActivity"
            android:label="@string/title_activity_maps"></activity>
        <activity
            android:name=".activities.group.GroupActivity"
            android:label="@string/title_activity_group"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
                android:name=".activities.group.GroupMemberActivity"
                android:label="@string/title_activity_member"
                android:theme="@style/AppTheme.NoActionBar"></activity>

        <service android:name=".intentservice.FetchAddressIntentService" android:exported="false" />
        <service android:name=".intentservice.GeofenceTransitionIntentService" android:exported="true" />

        <!-- Set the exported as false, so that the service cannot be started by other
         application. Provide a description of the service as users can see the list of services
         currently running and if they do not find a suitable description they may stop it. -->
        <service android:name=".intentservice.FetchCurrentLocationIntentService" android:exported="false" />
        <service android:name=".service.FetchCurrentLocationService" android:exported="false" />
        <service android:name=".service.MainFirebaseMessagingService">
            <intent-filter>
                <action android:name="com.google.firebase.MESSAGING_EVENT" />
            </intent-filter>
        </service>


        <!-- Make the process as remote so that the receiver keeps running on separate thread even if the application is closed. -->
    <receiver android:name=".broadcastreceiver.FetchCurrentLocationAlarmReceiver" />
    </application>

</manifest>